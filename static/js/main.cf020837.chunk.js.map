{"version":3,"sources":["API/api.ts","redux/reducers/usersReducer.ts","redux/todos/todosReducer.ts","components/Tables/TableComponent.tsx","components/Tables/Wrapper.tsx","components/Layout/MainPageLayout.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["instance","axios","create","baseURL","withCredentials","usersAPI","get","then","res","data","todosAPI","id","payload","patch","delete","title","post","userId","initialState","allUsers","totalUsersCount","initialTodoState","allTodos","todosActions","todos","type","task","updateTask","dispatch","a","response","Error","error","message","console","log","TableComponent","React","memo","useState","text","setText","activeTaskID","setActiveTaskId","useDispatch","dataSource","map","t","key","isModalVisible","setIsModalVisible","handleOk","handleCancel","columns","sorter","b","render","destroyOnClose","mask","visible","onOk","onCancel","findIndex","placeholder","onChange","e","currentTarget","value","onClick","style","padding","margin","EditOutlined","cursor","color","completed","toString","toUpperCase","danger","resp","deleteTask","Wrapper","userTasks","todosState","useParams","useSelector","state","useEffect","useMemo","filter","Header","Layout","Content","Footer","Sider","SubMenu","Menu","MainPageLayout","props","collapsed","setCollapsed","username","activeUser","setActiveUser","history","useHistory","replace","push","usersJSX","users","user","Item","clickHandler","minHeight","collapsedWidth","width","collapsible","onCollapse","prev","className","theme","defaultSelectedKeys","mode","icon","UserOutlined","shape","PlusCircleOutlined","size","path","textAlign","App","getUsers","catch","err","finally","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","length","copy","unshift","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","window"],"mappings":"kPAgBaA,E,OAAWC,EAAMC,OAAO,CACjCC,QAAS,wCACTC,iBAAiB,IAGRC,EAAW,WAEhB,OAAOL,EAASM,IAAoC,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAIxEC,EAAW,WAEhB,OAAOV,EAASM,IAAoC,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAFxEC,EAAW,SAIRC,EAAYC,GACpB,OAAQZ,EAASa,MAAT,iBAAyDF,GAAMC,GAASL,MAAK,SAAAC,GACjF,OAAOA,EAAIC,SANVC,EAAW,SASRC,GACR,OAAOX,EAASc,OAAT,iBAA8BH,IAAMJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAVtDC,EAAW,SAYZC,EAAYI,GAChB,OAAOf,EAASgB,KAAT,UAA2C,CAACD,MAAOA,EAAOE,OAAQN,IAAKJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCpChGS,EAAgB,CAClBC,SAAU,GACVC,gBAAiB,G,iICHfC,EAAmB,CACrBC,SAAU,IAEDC,EACC,SAACC,GAAD,MAAgC,CAACC,KAAM,eAAgBD,UADxDD,EAEG,SAACZ,GAAD,MAAiB,CAACc,KAAM,cAAed,OAF1CY,EAGG,SAACZ,EAAYC,GAAb,MAAkD,CAACa,KAAM,cAAed,KAAIC,YAH/EW,EAII,SAACG,GAAD,MAA6B,CAACD,KAAM,eAAgBC,SAkDxDC,EAAa,SAAChB,EAAYC,GAAb,8CAAyE,WAAOgB,GAAP,SAAAC,EAAA,+EAExEnB,EAAqBC,EAAIC,GAF+C,cAI3FgB,EAASL,EAAwBZ,EAAIC,IAJsD,sDAMpF,KAAEkB,SAAW,IAAIC,MAAM,KAAED,SAASrB,KAAKuB,OAAS,IAAID,MAAM,KAAEE,QAAU,iCANc,yBAQ3FC,QAAQC,IAAI,uEAR+E,4EAAzE,uD,iBC5CbC,EAAsCC,IAAMC,MAAK,YAAa,IAAXZ,EAAU,EAAVA,KAAU,EAC9Ca,mBAAS,IADqC,mBAC/DC,EAD+D,KACzDC,EADyD,OAE9BF,mBAAS,GAFqB,mBAE/DG,EAF+D,KAEjDC,EAFiD,KAGhEf,EAAWgB,cACXC,EAAanB,EAAKoB,KAAI,SAAAC,GAAC,kCAASA,GAAT,IAAYC,IAAKD,EAAEpC,QAJsB,EAK1B4B,oBAAS,GALiB,mBAK/DU,EAL+D,KAK/CC,EAL+C,KAWhEC,EAAW,WACbD,GAAkB,GAClBtB,EAASD,EAAWe,EAAc,CAAC3B,MAAOyB,KAC1CC,EAAQ,KAENW,EAAe,WACjBX,EAAQ,IACRS,GAAkB,IAGhBG,EAAU,CACZ,CACItC,MAAO,OACPiC,IAAK,QACLM,OAAQ,SAACzB,EAAQ0B,GACb,OAAO1B,EAAEd,MAAQwC,EAAExC,MAAQ,GAAK,GAEpCyC,OAAQ,SAAC/C,GAAsC,IAAD,EAtBnCE,EAwBH,OACQ,qCAAGF,EAAKM,MACJ,eAAC,IAAD,CAAO0C,gBAAgB,EAAMC,MAAM,EAAO3C,MAAM,oBAAoB4C,QAASV,EAAgBW,KAAMT,EAAUU,SAAUT,EAAvH,UACI,0CAAaV,KACb,sCAAKhB,EAAKA,EAAKoC,WAAU,SAAAf,GAAC,OAAIA,EAAEpC,KAAO+B,aAAvC,aAAI,EAAoD3B,QACxD,uBAAOgD,YAAa,iBAAkBC,SAAU,SAACC,GAAD,OAAOxB,EAAQwB,EAAEC,cAAcC,QAAQA,MAAO3B,OAElG,cAAC,IAAD,CAAQf,KAAK,UAAU2C,SA/BhCzD,EA+BmDF,EAAKE,GA/BxC,WAC/BgC,EAAgBhC,GAChBuC,GAAkB,KA6B0DmB,MAAO,CAACC,QAAS,MAAOC,OAAQ,OAApF,SACI,cAACC,EAAA,EAAD,WAM5B,CACIzD,MAAO,SACPiC,IAAK,YACLQ,OAAQ,SAAC/C,GACL,OAAO,cAAC,IAAD,CAAK4D,MAAO,CAACI,OAAQ,WAAYC,MAAOjE,EAAKkE,UAAY,QAAU,MAAOP,QAAS,kBAAMxC,EAASD,EAAWlB,EAAKE,GAAI,CAACgE,WAAYlE,EAAKkE,cAAxI,SACFlE,EAAKkE,UAAUC,WAAWC,kBAIvC,CACI9D,MAAO,UACPiC,IAAK,KACLQ,OAAQ,SAAC/C,GACGA,EAAKE,GACd,OACK,mCACI,cAAC,IAAD,CACImE,QAAM,EACNV,QAAS,WACLxC,ED/BN,SAACjB,GAAD,8CAA2B,WAAOiB,GAAP,eAAAC,EAAA,+EAE1BnB,EAAqBC,GAFK,OAEvCoE,EAFuC,OAG7C7C,QAAQC,IAAI4C,GACZnD,EAASL,EAAwBZ,IAJY,sDAMtC,KAAEmB,SAAW,IAAIC,MAAM,KAAED,SAASrB,KAAKuB,OAAS,IAAID,MAAM,KAAEE,QAAU,iCANhC,yBAQ7CC,QAAQC,IAAI,uEARiC,4EAA3B,sDC+Be6C,CAAWvE,EAAKE,MAHjC,2BAWpB,OAAO,cAAC,IAAD,CAAQkC,WAAYA,EAAYQ,QAASA,OC7EvC4B,EAAsC,SAAC,GAAc,IAI1DC,EAJ6CjE,EAAY,EAAZA,OAE3CkE,GADSC,cACIC,aAAgD,SAAAC,GAAK,OAAIA,EAAM9D,UAC5EI,EAAWgB,cAQjB,OALA2C,qBAAU,WACN3D,EFoBgB,uCAAiB,WAAOA,GAAP,eAAAC,EAAA,+EAEVnB,IAFU,OAE3BY,EAF2B,OAGjCM,EAASL,EAAsBD,IAHE,sDAK1B,KAAEQ,SAAW,IAAIC,MAAM,KAAED,SAASrB,KAAKuB,OAAS,IAAID,MAAM,KAAEE,QAAU,iCAL5C,yBAOjCC,QAAQC,IAAI,2GAPqB,4EAAjB,yDEnBjB,CAAClB,IAEJiE,EAAYM,mBAAQ,WAAQ,OAAOL,EAAW7D,SAASmE,QAAO,SAAA1C,GAAC,OAAIA,EAAE9B,SAAWA,OAAU,CAACA,EAAQkE,IAC5F,4CACOlE,EACV,cAACmB,EAAD,CAAgBV,KAAMwD,QCdvBQ,EAAkCC,IAAlCD,OAAQE,EAA0BD,IAA1BC,QAASC,EAAiBF,IAAjBE,OAAQC,EAASH,IAATG,MACzBC,EAAWC,IAAXD,QACME,EAAiB,SAACC,GAA4B,IAAD,EACpB3D,oBAAkB,GADE,mBAC/C4D,EAD+C,KACpCC,EADoC,OAElB7D,mBAAoB,CAAC8D,SAAU,OAAQ1F,GAAI,IAFzB,mBAE/C2F,EAF+C,KAEnCC,EAFmC,OAG9BhE,mBAAS,IAHqB,mBAG/CC,EAH+C,KAGzCC,EAHyC,KAIhD+D,EAAUC,cACV7E,EAAWgB,cACjB2C,qBAAU,WACY,IAAlBe,EAAW3F,GAAW6F,EAAQE,QAAQ,IAAMF,EAAQG,KAAR,iBAAuBL,EAAW3F,GAAGiE,eAClF,CAAC4B,EAASF,IAGb,IAOMM,EAAWV,EAAMW,MAAM/D,KAAI,SAAAgE,GAAI,OAAI,eAAC,IAAKC,KAAN,CAAW3C,QAAS,kBAJxC,SAAC0C,GAClBP,EAAc,eAAIO,IAG6CE,CAAaF,IAAvC,UAC+BA,EAAKT,SAAL,OAD/B,UAEhCS,EAAKnG,KADgDmG,EAAKnG,OAGnE,OACI,eAAC,IAAD,CAAQ0D,MAAO,CAAC4C,UAAW,SAA3B,UACI,eAACnB,EAAD,CAAOoB,eAAgB,GAAIC,MAAO,IAAKC,aAAW,EAACjB,UAAWA,EAAWkB,WAb9D,WACfjB,GAAa,SAAAkB,GAAI,OAAKA,MAYlB,UACI,qBAAKC,UAAU,SACf,cAAC,IAAD,CAAMC,MAAM,QAAQC,oBAAqB,CAAC,KAAMC,KAAK,SAArD,SACI,cAAC3B,EAAD,CAAqB4B,KAAM,cAACC,EAAA,EAAD,IAAiB7G,MAAM,OAAlD,SACK6F,GADQ,cAKrB,eAAC,IAAD,CAAQW,UAAU,cAAlB,UACI,cAAC7B,EAAD,CAAQ6B,UAAU,yBAAyBlD,MAAO,CAACC,QAAS,GAA5D,uBACA,eAACsB,EAAD,CAASvB,MAAO,CAACE,OAAQ,UAAzB,UACI,eAAC,IAAD,CAAYF,MAAO,CAACE,OAAQ,UAA5B,UACI,cAAC,IAAWwC,KAAZ,oBAEyB,SAAxBT,EAAWD,SACN,KACA,yDACoBC,EAAWD,SAC7B,uBAAOlC,MAAO3B,EAAMwB,SAAU,SAACC,GAAD,OAAOxB,EAAQwB,EAAEC,cAAcC,UAC7D,cAAC,IAAD,CAAQC,QAAS,kBAAMxC,GHkB/BjB,EGlBgD2F,EAAW3F,GHkB/CI,EGlBmDyB,EHkBhE,uCAA0C,WAAOZ,GAAP,eAAAC,EAAA,+EAEvCnB,EAAiBC,EAAII,GAFkB,OAEnDP,EAFmD,OAGzDoB,EAASL,EAAA,2BAA6Bf,GAA7B,IAAkCmE,WAAW,MAHG,sDAMlD,KAAE7C,SAAW,IAAIC,MAAM,KAAED,SAASrB,KAAKuB,OAAS,IAAID,MAAM,KAAEE,QAAU,iCANpB,yBASzDC,QAAQC,IAAI,uEAT6C,4EAA1C,4DAACxB,EAAYI,GGlB2DU,KAAK,UAAUoG,MAAM,SAASF,KAAM,cAACG,EAAA,EAAD,IAAyBC,KAAM,gBAG9I,qBAAKR,UAAU,yBAAyBlD,MAAO,CAACC,QAAS,EAAG2C,UAAW,KAAvE,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOe,KAAM,cAAexE,OAAQ,kBAAM,cAAC,EAAD,CAASvC,OAAQqF,EAAW3F,eAIlF,cAACkF,EAAD,CAAQxB,MAAO,CAAC4D,UAAW,UAA3B,+DCpBDC,MAjBf,WACI,IAAMrB,EAAQxB,aAAuC,SAAAC,GAAK,OAAIA,EAAMuB,MAAM1F,YACpES,EAAWgB,cAMjB,OAJA2C,qBAAU,WACN3D,GLNuB,SAACA,GAC5BvB,IACKE,MAAK,SAAAsG,GACFjF,EAjBK,SAACiF,GAAD,MAAyB,CAACpF,KAAM,gBAAiBoF,SAiB7CsB,CAAStB,OAErBuB,OAAM,SAAAC,GACH,MAAM,IAAItG,MAAMsG,MAEnBC,SAAQ,WACLpG,QAAQC,IAAI,mHKFjB,IAGC,8BACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAO6F,KAAM,IAAKxE,OAAQ,kBAAM,cAAC,EAAD,CAAgBqD,MAAOA,YCvBxD0B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlI,MAAK,YAAkD,IAA/CmI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,0BCHRO,EAAcC,YAAgB,CAChCnC,MPQwB,WAA0E,IAAzEvB,EAAwE,uDAA1CpE,EAAc+H,EAA4B,uCACjG,OAAOA,EAAOxH,MACV,IAAK,gBACD,OAAO,2BAAI6D,GAAX,IAAkBnE,SAAU8H,EAAOpC,MAAOzF,gBAAiB6H,EAAOpC,MAAMqC,SAE5E,QACI,OAAO5D,IObf9D,MNMwB,WAAoG,IAAnG8D,EAAkG,uDAApEjE,EAAkB4H,EAAkD,uCAC3H,OAAQA,EAAOxH,MACX,IAAK,eACD,OAAO,2BAAI6D,GAAX,IAAkBhE,SAAU2H,EAAOzH,QAEvC,IAAK,cACD,OAAO,2BAAI8D,GAAX,IAAkBhE,SAAUgE,EAAMhE,SAASmE,QAAO,SAAA/D,GAAI,OAAIA,EAAKf,KAAOsI,EAAOtI,QAEjF,IAAK,cACD,OAAO,2BAAI2E,GAAX,IAAkBhE,SAAUgE,EAAMhE,SAASwB,KAAI,SAAAC,GAAC,OAAIA,EAAEpC,KAAOsI,EAAOtI,GAAKoC,EAArB,2BAA6BA,GAAMkG,EAAOrI,cAElG,IAAK,eACD,IAAMuI,EAAI,YAAO7D,EAAMhE,UAEvB,OADA6H,EAAKC,QAAQH,EAAOvH,MACb,2BAAI4D,GAAX,IAAkBhE,SAAU6H,IAEhC,QACI,OAAO7D,MMrBN+D,GAAQC,YAAYP,EAAaQ,YAAgBC,MCD9DC,IAASjG,OACL,cAAC,IAAD,UACI,cAAC,IAAD,CAAU6F,MAAOA,GAAjB,SACI,cAAC,EAAD,QAGVK,SAASC,eAAe,SAO1BC,OAAOP,MAAQA,GACfd,M","file":"static/js/main.cf020837.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport type UserResponseType = {\r\n    username: string,\r\n    id: number\r\n};\r\nexport type TaskResponseType = {\r\n    id: number,\r\n    title: string,\r\n    body: '',\r\n    userId: number\r\n}\r\nexport type TodoResponseType = { userId: number, id: number, title: string, completed: boolean};\r\n\r\ntype ErrorType = {}; // в данном REST API - не приходит респонс при ошибках\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n    withCredentials: true\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers() {\r\n        return instance.get<UserResponseType[] & ErrorType>('users').then(res => res.data)\r\n    }\r\n}\r\n\r\nexport const todosAPI = {\r\n    getTodos() {\r\n        return instance.get<TodoResponseType[] & ErrorType>('todos').then(res => res.data)\r\n    },\r\n    updateTodos(id: number, payload: {[key: string]: string | boolean}) {\r\n        return  instance.patch<TodoResponseType[] & ErrorType>(`/todos/${id}`, payload).then(res => {\r\n            return res.data;\r\n        })\r\n    },\r\n    deleteTodos(id: number) {\r\n        return instance.delete<{}>(`/todos/${id}`).then(res => res.data)\r\n    },\r\n    addTask(id: number, title: string) {\r\n        return instance.post<TaskResponseType>(`/todos/`, {title: title, userId: id}).then(res => res.data)\r\n    }\r\n}","import {UsersType} from \"../../App\";\r\nimport {usersAPI} from \"../../API/api\";\r\nimport {ThunkDispatchType} from \"../store\";\r\n\r\nconst initialState  = {\r\n    allUsers: [] as UsersType[],\r\n    totalUsersCount: 0 as Number\r\n};\r\nexport type InitialUsersStateType = typeof initialState\r\n\r\n\r\nconst getUsers = (users: UsersType[]) => ({type: 'GET_ALL_USERS', users} as const)\r\n\r\n\r\n\r\nexport const usersReducer = (state:InitialUsersStateType = initialState, action:UsersActionsType) => {\r\n    switch(action.type) {\r\n        case \"GET_ALL_USERS\": {\r\n            return {...state, allUsers: action.users, totalUsersCount: action.users.length}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getUserTC = () => (dispatch: ThunkDispatchType) => {\r\n    usersAPI.getUsers()\r\n        .then(users => {\r\n            dispatch(getUsers(users))\r\n        })\r\n        .catch(err => {\r\n            throw new Error(err)\r\n        })\r\n        .finally(() => {\r\n            console.log('Отключить крутилку');\r\n            //TODO\r\n        })\r\n}\r\n\r\nexport type UsersActionsType = ReturnType<typeof getUsers>\r\n","import {TodoResponseType, todosAPI} from \"../../API/api\";\r\nimport {InferActionType, ThunkDispatchType, ThunkType} from \"../store\";\r\n\r\nconst initialTodoState = {\r\n    allTodos: [] as TodoResponseType[]\r\n}\r\nexport const todosActions = {\r\n    getTodos: (todos: TodoResponseType[]) => ({type: 'GET_ALL_TODO', todos} as const),\r\n    deleteTask: (id: number) => ({type: 'DELETE_TASK', id} as const),\r\n    updateTask: (id: number, payload: { [key: string]: any }) => ({type: 'UPDATE_TASK', id, payload} as const),\r\n    addsNewTask: (task: TodoResponseType) => ({type: 'ADD_NEW_TASK', task} as const)\r\n}\r\n\r\n//reducer\r\nexport const todosReducer = (state: InitialTodoStateType = initialTodoState, action: TodoActionsType): InitialTodoStateType => {\r\n    switch (action.type) {\r\n        case \"GET_ALL_TODO\": {\r\n            return {...state, allTodos: action.todos}\r\n        }\r\n        case \"DELETE_TASK\": {\r\n            return {...state, allTodos: state.allTodos.filter(task => task.id !== action.id)}\r\n        }\r\n        case \"UPDATE_TASK\": {\r\n            return {...state, allTodos: state.allTodos.map(t => t.id !== action.id ? t : {...t, ...action.payload})}\r\n        }\r\n        case \"ADD_NEW_TASK\": {\r\n            const copy = [...state.allTodos]\r\n            copy.unshift(action.task)\r\n            return {...state, allTodos: copy}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//thunks\r\nexport const getTodos = (): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const allTodos = await todosAPI.getTodos()\r\n        dispatch(todosActions.getTodos(allTodos))\r\n    } catch (e: any) {\r\n        throw  e.response ? new Error(e.response.data.error) : new Error(e.message + ', more details in the console')\r\n    } finally {\r\n        console.log('Отключить крутилку')\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id: number): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const resp = await todosAPI.deleteTodos(id)\r\n        console.log(resp) //так как фейковый серв, ничего не происходит\r\n        dispatch(todosActions.deleteTask(id))\r\n    } catch (e: any) {\r\n        throw  e.response ? new Error(e.response.data.error) : new Error(e.message + ', more details in the console')\r\n    } finally {\r\n        console.log('Некая логика')\r\n    }\r\n}\r\n\r\nexport const updateTask = (id: number, payload: { [key: string]: string | boolean }): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const resp = await todosAPI.updateTodos(id, payload)\r\n        //так как фейковый серв, ничего не происходит\r\n        dispatch(todosActions.updateTask(id, payload))\r\n    } catch (e: any) {\r\n        throw  e.response ? new Error(e.response.data.error) : new Error(e.message + ', more details in the console')\r\n    } finally {\r\n        console.log('Некая логика')\r\n    }\r\n}\r\n\r\nexport const addTask = (id: number, title: string): ThunkType => async (dispatch: ThunkDispatchType) => {\r\n    try {\r\n        const res = await todosAPI.addTask(id, title)\r\n        dispatch(todosActions.addsNewTask({...res, completed: false}))\r\n    }\r\n    catch(e: any) {\r\n        throw  e.response ? new Error(e.response.data.error) : new Error(e.message + ', more details in the console')\r\n    }\r\n    finally {\r\n        console.log('Некая логика') // TODO добавить крутилку и ее выключение при загрузке\r\n    }\r\n}\r\n//types\r\nexport type TodoActionsType = InferActionType<typeof todosActions>;\r\nexport type InitialTodoStateType = typeof initialTodoState;","import React, {useState} from \"react\";\r\nimport {Button, Table, Tag, Modal} from \"antd\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteTask, updateTask} from \"../../redux/todos/todosReducer\";\r\nimport {EditOutlined} from \"@ant-design/icons\";\r\n\r\ntype TaskType = {\r\n    completed: boolean\r\n    id: number\r\n    title: string\r\n    userId: number\r\n}\r\n\r\ntype PropsType = {\r\n    task: Array<TaskType>\r\n}\r\nexport const TableComponent: React.FC<PropsType> = React.memo(({task}) => {\r\n    const [text, setText] = useState('');\r\n    const [activeTaskID, setActiveTaskId] = useState(0)\r\n    const dispatch = useDispatch()\r\n    const dataSource = task.map(t => ({...t, key: t.id}))\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const showModal = (id: number) =>  () =>{\r\n        setActiveTaskId(id)\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n        dispatch(updateTask(activeTaskID, {title: text}))\r\n        setText('')\r\n    }\r\n    const handleCancel = () => {\r\n        setText('')\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Task',\r\n            key: 'title',\r\n            sorter: (a: any, b: any) => {\r\n                return a.title > b.title ? 1 : -1\r\n            },\r\n            render: (data: TaskType & { key: number }) => {\r\n\r\n                    return  (\r\n                            <>{data.title}\r\n                                <Modal destroyOnClose={true} mask={false} title=\"Change Task Title\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                                    <p>Task id: {activeTaskID}</p>\r\n                                    <p>{(task[task.findIndex(t => t.id === activeTaskID)])?.title}</p>\r\n                                    <input placeholder={'type task text'} onChange={(e) => setText(e.currentTarget.value)} value={text}/>\r\n                                </Modal>\r\n                                <Button type=\"primary\" onClick={showModal(data.id)} style={{padding: '5px', margin: '5px'}}>\r\n                                    <EditOutlined />\r\n                                </Button>\r\n                            </>\r\n                    )\r\n            }\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'completed',\r\n            render: (data: TaskType & { key: number }) => {\r\n                return <Tag style={{cursor: \"pointer\"}} color={data.completed ? 'green' : 'red'} onClick={() => dispatch(updateTask(data.id, {completed: !data.completed}))}>\r\n                    {data.completed.toString().toUpperCase()}\r\n                </Tag>\r\n            }\r\n        },\r\n        {\r\n            title: 'Actions',\r\n            key: 'id',\r\n            render: (data: TaskType & { key: number }) => {\r\n               let id = data.id\r\n               return  (\r\n                    <>\r\n                        <Button\r\n                            danger\r\n                            onClick={() => {\r\n                                dispatch(deleteTask(data.id))\r\n                            }}\r\n                        > Delete </Button>\r\n                    </>\r\n                )\r\n            }\r\n        },\r\n    ];\r\n    return <Table  dataSource={dataSource} columns={columns}/>;\r\n})","import React, {useEffect, useMemo} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TableComponent} from \"./TableComponent\";\r\nimport {getTodos, InitialTodoStateType} from \"../../redux/todos/todosReducer\";\r\nimport {TodoResponseType} from \"../../API/api\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\ntype WrapperPropsType = { userId: number }\r\nexport const Wrapper: React.FC<WrapperPropsType> = ({userId}) => {\r\n    const params = useParams();\r\n    const todosState = useSelector<AppStateType, InitialTodoStateType>(state => state.todos)\r\n    const dispatch = useDispatch()\r\n    let userTasks = [] as TodoResponseType[]\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodos())\r\n    }, [userId])\r\n\r\n    userTasks = useMemo(() => { return todosState.allTodos.filter(t => t.userId === userId)}, [userId, todosState]);\r\n    return <div>\r\n        User id: {userId}\r\n        <TableComponent task={userTasks}/>\r\n    </div>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Route, Switch, useHistory} from \"react-router-dom\";\r\nimport {Breadcrumb, Button, Layout, Menu} from \"antd\";\r\nimport {PlusCircleOutlined, UserOutlined} from \"@ant-design/icons\";\r\nimport {CommonPropsType, UsersType} from \"../../App\";\r\nimport {Wrapper} from '../Tables/Wrapper'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addTask} from \"../../redux/todos/todosReducer\";\r\n\r\nconst {Header, Content, Footer, Sider} = Layout;\r\nconst {SubMenu} = Menu;\r\nexport const MainPageLayout = (props: CommonPropsType) => {\r\n    const [collapsed, setCollapsed] = useState<boolean>(false)\r\n    const [activeUser, setActiveUser] = useState<UsersType>({username: 'User', id: 0});\r\n    const [text, setText] = useState('');\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        activeUser.id === 0 ? history.replace('') : history.push(`/users/${activeUser.id.toString()}`)\r\n    }, [history, activeUser])\r\n\r\n\r\n    const onCollapse = () => {\r\n        setCollapsed(prev => !prev);\r\n    };\r\n    const clickHandler = (user: UsersType) => {\r\n        setActiveUser({...user})\r\n    }\r\n\r\n    const usersJSX = props.users.map(user => <Menu.Item onClick={() => clickHandler(user)}\r\n                                                             key={user.id}>{user.username + ` \\n `} -\r\n        id: {user.id}</Menu.Item>)\r\n\r\n    return (\r\n        <Layout style={{minHeight: '100vh'}}>\r\n            <Sider collapsedWidth={70} width={240} collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n                <div className=\"logo\"/>\r\n                <Menu theme=\"light\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                    <SubMenu key=\"users\" icon={<UserOutlined/>} title=\"User\">\r\n                        {usersJSX}\r\n                    </SubMenu>\r\n                </Menu>\r\n            </Sider>\r\n            <Layout className=\"site-layout\">\r\n                <Header className=\"site-layout-background\" style={{padding: 0}}>TODOs APP</Header>\r\n                <Content style={{margin: '0 16px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Users</Breadcrumb.Item>\r\n                        {/*<Breadcrumb.Item>{activeUser.username}</Breadcrumb.Item>*/}\r\n                        {activeUser.username === 'User'\r\n                            ? null\r\n                            : <>\r\n                                Add new task for {activeUser.username}\r\n                                <input value={text} onChange={(e) => setText(e.currentTarget.value)}/>\r\n                                <Button onClick={() => dispatch(addTask(activeUser.id, text))} type=\"primary\" shape=\"circle\" icon={<PlusCircleOutlined /> } size={\"small\"} />\r\n                            </>}\r\n                    </Breadcrumb>\r\n                    <div className=\"site-layout-background\" style={{padding: 0, minHeight: 550}}>\r\n                        <Switch>\r\n                            <Route path={'/users/:id?'} render={() => <Wrapper userId={activeUser.id}/>}/>\r\n                        </Switch>\r\n                    </div>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>Users Todos experience with AntDesign 2021</Footer>\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {Route, Switch} from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport {getUserTC} from \"./redux/reducers/usersReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport {MainPageLayout} from './components/Layout/MainPageLayout'\n\nexport type UsersType = {\n    username: string;\n    id: number;\n}\n\nexport type CommonPropsType = {\n    users: UsersType[];\n};\n\n\n\n\n\n\n\n\n\nfunction App() {\n    const users = useSelector<AppStateType, UsersType[]>(state => state.users.allUsers)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getUserTC())\n    }, [])\n\n    return (\n        <div>\n            <Switch>\n                <Route path={'/'} render={() => <MainPageLayout users={users}/>}/>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {UsersActionsType, usersReducer} from \"./reducers/usersReducer\";\r\nimport thunk, {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {TodoActionsType, todosReducer} from \"./todos/todosReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer,\r\n    todos: todosReducer\r\n});\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppStoreType = typeof store;\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\nexport type CommonActionTypeForApp  = UsersActionsType | TodoActionsType\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, CommonActionTypeForApp>;\r\nexport type ThunkDispatchType = ThunkDispatch<AppStateType, unknown, CommonActionTypeForApp>;\r\nexport type InferActionType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//@ts-ignore\nwindow.store = store;\nreportWebVitals();\n"],"sourceRoot":""}